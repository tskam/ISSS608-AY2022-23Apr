{
  "hash": "b6b5cf2d14d7c889e460507e53980883",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 2: Kick-starter 2: Visualising and Analysing Network Data\"\ndate: \"12/4/2023\"\ndate-modified: \"2023-05-25\"\nformat: html\nexecute: \n  eval: true\n  echo: true\n  warning: false\neditor: visual\n---\n\n\n::: callout-warning\n## Declaimer\n\nThis document aims to provide you guidance on how to get started with Takehome Exercise 2, especially how to prepare the network data. It is not a model answer.\n:::\n\n## Getting Started\n\nThe code chunk below will be used to install and load the necessary R packages to meet the data preparation, data wrangling, data analysis and visualisation needs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, lubridate, igraph, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"schochastics/snahelper\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(snahelper)\n```\n:::\n\n\n## Data Import\n\nIn the code chunk below, `fromJSON()` of **jsonlite** package is used to import *mc2_challenge_graph.json* into R environment.\n\n### Visualising the network graph with ggraph\n\nIn this code chunk below, appropriate functions from **ggraph** package are used to prepare the network graph. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(mc2_graph,\n       layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes()) +\n  theme_graph()\n```\n:::\n\n\n\nComputing Network Metrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_graph1 <- mc2_graph %>% \n  mutate(indegree = centrality_degree(\n    weights = weights, mode = \"in\"),\n    outdegree = centrality_degree(\n    weights = weights, mode = \"out\"), \n    closeness_centrality = centrality_closeness(),\n    betweenness_centrality = centrality_betweenness(),\n    component = group_components(type = \"weak\")\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_df <- mc2_graph1 %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(id=row_number()) %>%\n  select(id, label, indegree, outdegree,\n         closeness_centrality, betweenness_centrality, component)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_df <- mc2_graph1 %>%\n  activate(edges) %>%\n  as.tibble()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvisNetwork(nodes_df,\n           edges_df) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(mc2_graph1) + \n  geom_edge_link(color = \"grey\", \n                 arrow = arrow(\n                   length = unit(0.2, \"cm\"))) +\n  geom_node_point(size = 2, \n                  aes(color = as.factor(component))) +\n  labs(color = \"Component\") +\n  theme_void()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_graph1 %>%\n  filter(component == 1) %>%\nggraph() + \n  geom_edge_link(color = \"grey\", \n                 arrow = arrow(\n                   length = unit(0.2, \"cm\"))) +\n  geom_node_point(aes(\n    color = as.factor(component),\n    size = indegree),\n    alpha = 0.5) +\n  labs(color = \"component\") +\n  theme_void()\n```\n:::\n\n\n\n\n\n::: Callout-note\nExamine the list object created by using RStudio, especially *nodes* and *links* data tables.\n:::\n\nCreating an igraph object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nig <- graph_from_data_frame(mc2_edges_aggregated, directed = TRUE, vertices = NULL)\n```\n:::\n\n\n\n\n\n## Building and Interactive network graph with visNetwork\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisNetwork(mc2_nodes_extracted,\n           mc2_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\")\n```\n:::\n",
    "supporting": [
      "MC2-Kick-starter2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}